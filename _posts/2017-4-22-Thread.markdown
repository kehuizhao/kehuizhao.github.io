---
layout:     post
title:      "初步理解进程与线程（线程篇）"
date:       2017-4-22 00:48:00
author:     "ThdLee"
tags:
    - 操作系统
---

线程是CPU使用的基本单元，由线程ID、程序计数器、寄存器集合和栈组成。它们与属于同一进程的其他线程共享代码段、数据段和其他操作系统资源。

和传统进程一样，线程也有运行、阻塞、就绪或终止等状态。

## 引入线程的原因

多线程产生的主要原因是，在许多应用中同时发生着多种活动，其中某些活动随着时间的推移会被阻塞，通过将这些应用程序分解成可以并行运行的多个顺序线程，程序设计模型会更简单。共享同一个地址空间和所有可用数据的能力正是这些应用所需要的，而这也正式多进程模型（它们具有不同的地址空间）所无法表达的。

第二个理由是，由于线程比进程更轻量级，所以它们比进程更容易（更快）创建，也更容易撤销。在许多系统中，创建一个线程较创建一个进程要快10~100倍。在有大量线程需要动态和快速修改时（如网页服务器），具有这一特性很有用。

第三个原因与性能有关。如果应用程序存在大量计算和大量I/O处理，拥有多个线程允许这些活动彼此交替进行，可以加快处理速度。

最后，多线程可以充分使用多处理器体系结构，以便每个进程能并行运行在不同的处理器上，在多个CPU上使用多线程加强了并发功能。

## 多线程模型

有两种不同的方法提供对线程的支持：用户层的用户线程和内核层的内核线程。用户线程受内核支持，而无需内核管理；而内核线程有操作系统直接支持和管理。


### 多对一模型

多对一模型将许多用户级线程映射到一个内核线程。线程管理是由线程库在用户空间进行的，因而效率比较高。但是如果一个线程执行了阻塞系统调用，那么整个进程就会阻塞。而且，因为任一时刻只有一个线程能访问内核，多个线程不能并行运行在多处理器上。

![多对一模型](http://thdlee.com/img/Thread/manyToOne.jpg)

### 一对一模型

一对一模型将每个用户线程映射到一个内核线程。该模型在一个线程执行阻塞系统调用时，能允许另一个线程继续执行，所以它提供了比多对一模型更好的并发功能；它也允许多个线程并行地运行在多处理器系统上。这种模型唯一的缺点就是每创建一个用户线程就需要创建一个相应的内核线程。由于创建内核线程的开销会影响应用程序的性能，所以这种模型的绝大多数实现限制了系统所支持的线程数量。

![一对一模型](http://thdlee.com/img/Thread/oneToOne.jpg)

### 多对多模型

多对多模型多路复用了许多用户线程到同样数量或更小数量的内核线程上。内核线程的数量可能与特定应用程序或特定机器有关（位于多处理器上的应用程序可以比单处理器上分配更多数量的内核线程）。虽然多对一模型允许开发人员创建任意多的用户线程，但是因为内核只能一次调度一个线程，所以并没有增加并发性。一对一模型提供了更大的并发性，但是开发人员必须小心，不要在应用程序内创建太多的线程（有实可能会限制创建线程的数量）。多对多模型没有这两者的缺点：开发人员可创建任意多的用户线程，并且相应内核线程能在多处理器上并发执行。而且，当一个线程执行阻塞系统调用时，内核能调度另一个线程来执行。

![多对多模型](http://thdlee.com/img/Thread/manyToMany.jpg)

## 线程库

线程库为程序员提供创建和管理线程的API。有两种方法实现线程库：在用户空间中和在内核中，不过混合实现的方式也是可能的。

### 在用户空间中实现

第一种方法是把整个线程库放在用户空间中，内核对线程库一无所知。从内核角度考虑，就是按正常的方式管理，即单线程进程。

所有的这类实现都有同样的通用结构，线程在一个运行时系统的顶部运行，这个运行时系统是一个管理线程过程的集合。

在用户空间管理线程时，每个进程需要有其专门的线程表(thread table)，用来跟踪改进程中的线程。这些表和内核中的进程表类似，不过它仅仅记录各个线程的属性，如每个线程的程序计数器、堆栈指针、寄存器和状态等。该表由运行时系统管理。

![用户空间中的线程库](http://thdlee.com/img/Thread/userThreadPackage.jpg)

### 在内核中实现

由操作系统直接支持的内核级的线程库，此时不再需要运行时系统，每个进程中也没有线程表。相反，库的代码和数据结构以及记录系统中所有线程的线程表都存放在内核空间中。当某个线程希望创建一个新线程或撤销一个已有线程时，它会产生一个系统调用，这个系统调用通过对线程表的更新完成线程创建或撤销工作。

![内核空间中的线程库](http://thdlee.com/img/Thread/kernalThreadPackage.jpg)

### 混合实现

关于线程的混合使用有很多种，一种方法是用内核级线程，然后将用户级线程与某些或者全部内核线程多路复用起来。如果采用这种方法，编程人员可以决定有多少个内核级线程和多少个用户级线程彼此多路复用。这一模型带来了很大的灵活度。

![多路复用](http://thdlee.com/img/Thread/multiplexing.jpg)
