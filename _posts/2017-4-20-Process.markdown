---
layout:     post
title:      "初步理解进程与线程（进程篇）"
date:       2017-4-20 00:00:00
author:     "ThdLee"
tags:
    - 操作系统
---

## 进程模型

在进程模型中，计算机上所有可运行的软件，通常也包括操作系统，被组织成若干顺序进程，简称进程。进程是一个正在执行的程序的实例，是程序实体的运行过程，包括程序计数器、寄存器和变量的当前值。它是对正在运行程序的抽象。内存中进程的结构如图所示：

![进程结构](http://thdlee.com/img/Process/processStructure.jpg)

一个进程是某种活动，它有程序、输入、输出以及状态。单个处理器可以被若干进程共享，它使用某种调度算法决定何时停止一个进程的工作，并转而服务另一个进程。

如果一个程序运行了两遍，则算作两个进程，它们虽然有着相同的文本，但是它们的数据段，堆栈段却不同，本质上是两个不同的进程。

## 进程创建

导致进程创建的主要事件有：

1. 系统初始化
2. 执行了正在运行的进程所调用的进程创建系统调用
3. 用户请求创建一个新进程
4. 一个批处理作业的初始化

从技术上看，新进程是由一个已存在的进程通过执行创建进程的系统调用创建的。这个系统调用通知系统创建进程，并直接或间接地指定在该进程中运行的程序。

## 进程终止

导致进程终止的主要条件有：

1. 正常退出（自愿）
2. 出错退出（自愿）
3. 严重错误（非自愿）
4. 被其他进程杀死（非自愿）

多数进程是由于完成工作而自动终止。

## 层次结构

在UNIX中，当进程创建了另一个进程后，父进程和子进程以某种形式继续保持关联。子进程自身也可以创建更多进程，组成一个进程的层次结构。进程会和它的所以子孙进程共同组成一个进程组。父进程必须等待子进程结束后回收子进程的资源。

而在Windows中没有进程层次的概念，所有进程地位相同。父进程在创建子进程的时候会得到一个特殊的Token，叫做句柄，可以用来控制子进程。但是这个句柄也可以传递给其他进程，所以并不存在进程层次。

## 进程的状态

尽管每个进程是一个独立的实体，有自己的程序计数器和内部状态，但是进程之间经常需要交互。

当一个进程在逻辑上不能继续运行时，它就会被阻塞，如等待输入的情况（自身原因）。当然，一个运行的进程也可以因为操作系统将CPU分配给了其他进程而被迫停止。（系统原因）

进程的三种状态：

1. 运行态（该时刻进程实际占用CPU）
2. 就绪态（可运行，但因为其他进程正在运行而暂时停止）
3. 阻塞态（除非某种外部事件发生，否则进程不能运行）

![进程状态间的转换](http://thdlee.com/img/Process/processState.jpg)

转换2和3是由进程调度程序引起的，进程调度程序是操作系统的一部分。当操作系统由于某些原因，如运行中的进程占用CPU时间过长等，会让运行态的进程阻塞，而让其他就绪态的进程根据某种或某些算法排序后权重最高的进程运行。**调度程序的主要工作就是决定应当运行那些进程、何时运行及它应该运行多长时间。当阻塞态进程等待的一个外部事件发生时，发生转换4。**

操作系统的最底层是调度程序，在它上面有许多进程。所有关于中断处理、启动进程和停止进程的具体细节都隐藏在调度程序中。实际上，调度程序是一段非常短小的程序。操作系统的其他部分被简单地组织成进程的形式。

![以进程构造的操作系统最底层处理中断和调度，在该层之上是顺序进程](scheduler)

## 进程控制块

为了实现进程模型，操作系统维护一张表格（一个数据结构），即进程表，也叫进程控制块（PCB），每个进程占用一个PCB。该表象包含了进程状态的重要信息，包括程序计数器，堆栈指针，内存分配状况，所打开文件的状态，帐号和调度信息，以及其他在进程由运行态转换到就绪或阻塞态时必须保存的信息，从而保证该进程随后能再次启动。

![进程控制块(PCB)](http://thdlee.com/img/Process/PCB.jpg)

